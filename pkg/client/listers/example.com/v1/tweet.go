/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/jonatanblue/tweet-operator/pkg/apis/example.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TweetLister helps list Tweets.
// All objects returned here must be treated as read-only.
type TweetLister interface {
	// List lists all Tweets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Tweet, err error)
	// Tweets returns an object that can list and get Tweets.
	Tweets(namespace string) TweetNamespaceLister
	TweetListerExpansion
}

// tweetLister implements the TweetLister interface.
type tweetLister struct {
	indexer cache.Indexer
}

// NewTweetLister returns a new TweetLister.
func NewTweetLister(indexer cache.Indexer) TweetLister {
	return &tweetLister{indexer: indexer}
}

// List lists all Tweets in the indexer.
func (s *tweetLister) List(selector labels.Selector) (ret []*v1.Tweet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Tweet))
	})
	return ret, err
}

// Tweets returns an object that can list and get Tweets.
func (s *tweetLister) Tweets(namespace string) TweetNamespaceLister {
	return tweetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TweetNamespaceLister helps list and get Tweets.
// All objects returned here must be treated as read-only.
type TweetNamespaceLister interface {
	// List lists all Tweets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Tweet, err error)
	// Get retrieves the Tweet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Tweet, error)
	TweetNamespaceListerExpansion
}

// tweetNamespaceLister implements the TweetNamespaceLister
// interface.
type tweetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Tweets in the indexer for a given namespace.
func (s tweetNamespaceLister) List(selector labels.Selector) (ret []*v1.Tweet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Tweet))
	})
	return ret, err
}

// Get retrieves the Tweet from the indexer for a given namespace and name.
func (s tweetNamespaceLister) Get(name string) (*v1.Tweet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("tweet"), name)
	}
	return obj.(*v1.Tweet), nil
}
